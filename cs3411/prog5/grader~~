#!/bin/bash
# @author Greg Miller
# @author gnmiller
# Program 5
# CS3411
# Fall 2014
# grader

# Iterates over return from ls | grep .java to check for .java files
# 	In the same step parses author names.
#
# Then uses line count from previous step to print author names or 
#	dir name.
#
# Continues by pulling the filelist and searching for main(
#	If main( is not found terminates or >1 were found.
#		If found stores the filename
#
# Then compiles using javac * and redirects output to dev/null
#
# After compilation, assuming success, the file stored in the main(
# search is executed and its output is printed.
#
# Notes: 
# - Accept any number of arguments, valid or not. Each argument
# 	is tested for -d and a message is outputted if it fails.
#
# - Does not handle programs with whitespace between main and (
# 	ex "main             (" will fail, despite being a valid java
#	file. ( grep -rnl --include='*.java' -P 'main\s\(' . should
#	handle this(?) but does not seem to work correctly.


for var in $@; do
	#enter the dir
	cd $var
	echo pwd
	#echo -E  "||-------------------- Begin output for "$var" --------------------||"
	
	#read author names, grab wc -l to see if there are any @author tags
	i=0
	for f in `ls -1 | grep .java`; do
		authors=`cat $f | grep @author | sed "s/ \* @author //g"`
		linecount=`cat $f | grep @author | sed "s/ \* @author //g" | wc -l`
	done
	
	#count names
	count=-1
	for name in $authors; do
		((++count))
	done
	
	#print names
	#removes dupes
	#then uses %2 to check if its the last name to insert the ','
	j=0
	if [ $linecount -ne 0 ]; then #were there names?
		eval a=($(printf "%q\n" "${a[@]}" | sort -u)) #remove duplicates
		for name in $authors; do
			if [ $(($j%2)) -ne 0 -a $count -ne $j ]; then #if index%2 != 0 && count!=j
				echo -n $name", " 
				((++j))
			elif [ $count -eq $j ]; then
				echo $name
			else
				echo -n $name" " 
				((++j))
			fi
		done
	else #no names
		echo $var 
	fi
	echo ""

	flag=0
	# retrieve the file list and test for successful compilation
	list=`ls | grep .java | wc -l`
	if [ $list -eq 0 ]; then #.java files?
		echo "no .java file(s) submitted" 
	else
		comp_ret=`javac *.java 2>&1 >> /dev/null` #surpress messages from javac until ready for them
		ret_c=$?
		#check for compilation errors
		if [ $ret_c -eq 0 ]; then			
			echo "no compilation errors" 
			flag=1
		else 
			#print javac error message + indentation
			echo "did not compile" 
			echo "$comp_ret" | awk -F '\n' '{print "     " $1}' 
			cd ..
			continue
		fi
	fi
	
	# test for presence of main and how many
	if [ $flag -eq 1 ]; then
		#store the file with main so we can call java $main
		main=`grep -rnl --include='*.java' . -e 'main('` 
		#check for many mains
		maincount=`grep -rnl --include='*.java' . -e 'main(' | wc -w`
		if [ $maincount -gt 1 ]; then
			echo "Multiple main detected, terminating." 
			cd ..
			continue #too many mains continue to next dir
		elif [ $maincount -lt 1 ]; then
			echo "no main in any class, can't execute" 
			cd ..
			continue #not enough mians continue to next dir
		else 
			echo "executing" 
			echo "" 
			#trim the filename for execution
			in=${main/'./'/}
			in=${in/'.java'/}
			java $in
			ret_c=$?
			#check return of java for normal term
			if [ $ret_c -eq 0 ]; then
				echo "normal termination"
			else
				echo "abnormal termination"
			fi
		fi
	fi
	
	#cleanup and go up to loop
	#echo -E  "||-------------------- End of output --------------------||"
	cd ..
done
