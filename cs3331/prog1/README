This was an exercise designed to demonstrate concurrent programming in a simple way. A parent executes some setup code and then forks
into several child processes. Each child computes some algorithm; in no particular order they are the buffon's needle problem,
the nth fibonacci, a heapsort of n random numbers (using rand()) and an algorithm for computing integrals.

Aside from demonstrating how concurrency works this also demonstrates how the big O of a child can significantly affect the parent.

--- Original Content Preserved ---
Greg Miller
CS3331
Fall 2014
9/26/14
README

Question 1: 

What will occur is the parent process will reach the loop and begin executing 
the if(fork()) line. When fork() returns the parent will receive 0, the child 
its PID. Since in C any non-zero value is treated as true in an if statement 
if(fork()) will return false for the parent, and it will continue its loop. 
The child wille execute if(my PID) which will be non-zero (assuming fork() 
is called successfully) and will break out of the loop and print its PID and 
parent's PID. If fork() fails the parent will either terminate or call 
printf (depending on the failure) but no children will be created. Once the
 parent has completed its loop (i==n-1) it will call printf and print its 
PID and the PID of the shell (or other process that called it, if not created
 from a shell).

The number of processes in total will be n-1. The parent will call fork n-2 
(i = 1 not 0) times and the parent is the nth process. The children NEVER call fork().

A diagram would look similar to this:

Parent -> if(fork()) -> fork() == 0 (parent execution) -> continue loop until i=n-1
							 v ( fork() != 0 ; child execution )
								exit the loop and call printf

Question 2:

This will execute similarly to question 1 but will detect errors and will spawn
only one child. When the parent reaches the if statement it will call fork(). If
fork() returns successfully the parent will receive a 0 and the child will receive
its PID. The parent receives 0 and immediately breaks out, the child's PID will 
always be > 0 so it too immediately breaks out of the loop. Both process then
call printf to print out ther PIDs and Parent's PIDs and exit.

Parent -> if(fork()<=0) -> parent fork()==0 -> break out of loop and call printf
				v (child fork() > 0)
			break out of loop and call printf

Question3 :

This program will spawn a massive number of children depending on the value of n.
The parent will reach the call to fork and do so. Assuming a successful call of fork()
both the child and the parent will receive a value that is not -1. They will both
continue the loop and return to the call to fork(). Both will then call fork() creating
2 new processes. The will repeat, essentially doubling the child count, with each call
to fork(). Each child will create n-i-1 children in total as they receive the current 
value of i (before incrementing) and as such will call fork() until i==n-1. This,
again, assumes successful calls to fork(). After each process has created i-n-1
children it exits and calls printf.

The execution will look something like this:

Parent -> loop -> fork() -> loop ...
	|
	-> Child1 -> fork() -> loop ...
		|
		-> Child2 -> fork() -> loop ...
			|
			-> Child3 -> fork() -> loop ... 
		-> Child4 -> fork() -> loop ...
	-> Child4 -> fork() -> loop ...
		|
		-> Child5 -> fork() -> loop ...
			|
			-> Child6 -> fork() -> loop ...
	
Where each level of indentation represents all children created by the next level up. Not all
levels are shown for simplicity but the tree will continue to grow down i-n-1 for each child
created. Eg Child1 is a child of Parent, Child2 is a child of Child1, etc.
